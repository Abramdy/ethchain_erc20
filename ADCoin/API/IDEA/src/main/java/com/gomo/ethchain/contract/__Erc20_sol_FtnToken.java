package com.gomo.ethchain.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class __Erc20_sol_FtnToken extends Contract {
    
    //608060405260018060146101000a81548160ff02191690831515021790555034801561002a57600080fd5b50601260ff16600a0a600002601260ff16600a0a6402540be40002601260ff16600a0a6311e1a300028282828181336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002819055508060048190555050508260038190555082600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885846040518082815260200191505060405180910390a23373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35050506001600c60006101000a81548160ff021916908315150217905550505050615ce5806200023a6000396000f300608060405260043610610246576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063046f7da21461024b57806306fdde0314610262578063095ea7b3146102f257806318160ddd1461035757806323b872dd146103825780632d21551814610407578063313ce5671461043e5780633badca251461046f57806340c10f191461053057806342966c681461059557806342bb66c4146105da57806348cc7b6e1461062957806348eac90214610658578063491eeb3a146106875780634fcc1fc0146106b6578063560ef1bf1461072c57806359dd7ad4146107835780635dd871a31461086457806366188463146108a95780636ad953171461090e57806370a08231146109cf57806373a72b1814610a26578063766e33f414610a8157806376f660f614610aac578063800edb9d14610b5457806383f12fec14610b995780638456cb5914610c2157806389b08f1114610c385780639433a49814610c8f57806395d89b4114610cba5780639aa9897914610d4a5780639b89010414610dc15780639cf4836514610df0578063a4c673c514610e47578063a9059cbb14610e76578063b703aa3a14610edb578063b9b8c24614610f0a578063bd632e1014610f6f578063c04e7e1714610ff7578063c96cd46f14611022578063d26e141414611039578063d28cb7b514611064578063d73dd623146110bb578063dd62ed3e14611120578063de8ae5c014611197578063efc5d183146111c2578063f2fde38b146111ed578063f9b4189114611248575b600080fd5b34801561025757600080fd5b50610260611273565b005b34801561026e57600080fd5b50610277611310565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102b757808201518184015260208101905061029c565b50505050905090810190601f1680156102e45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102fe57600080fd5b5061033d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611349565b604051808215151515815260200191505060405180910390f35b34801561036357600080fd5b5061036c611495565b6040518082815260200191505060405180910390f35b34801561038e57600080fd5b506103ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061149f565b604051808215151515815260200191505060405180910390f35b34801561041357600080fd5b5061043c6004803603810190808035906020019092919080359060200190929190505050611942565b005b34801561044a57600080fd5b506104536119fc565b604051808260ff1660ff16815260200191505060405180910390f35b34801561047b57600080fd5b506105166004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611a01565b604051808215151515815260200191505060405180910390f35b34801561053c57600080fd5b5061057b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611dee565b604051808215151515815260200191505060405180910390f35b3480156105a157600080fd5b506105c060048036038101908080359060200190929190505050612198565b604051808215151515815260200191505060405180910390f35b3480156105e657600080fd5b5061060f600480360381019080803590602001909291908035906020019092919050505061235a565b604051808215151515815260200191505060405180910390f35b34801561063557600080fd5b5061063e61245b565b604051808215151515815260200191505060405180910390f35b34801561066457600080fd5b5061066d612521565b604051808215151515815260200191505060405180910390f35b34801561069357600080fd5b5061069c612534565b604051808215151515815260200191505060405180910390f35b3480156106c257600080fd5b50610701600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612616565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b34801561073857600080fd5b5061076d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612653565b6040518082815260200191505060405180910390f35b34801561078f57600080fd5b5061084a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506128a5565b604051808215151515815260200191505060405180910390f35b34801561087057600080fd5b5061088f60048036038101908080359060200190929190505050612e81565b604051808215151515815260200191505060405180910390f35b3480156108b557600080fd5b506108f4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612eb0565b604051808215151515815260200191505060405180910390f35b34801561091a57600080fd5b506109b560048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506130a4565b604051808215151515815260200191505060405180910390f35b3480156109db57600080fd5b50610a10600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613672565b6040518082815260200191505060405180910390f35b348015610a3257600080fd5b50610a67600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506136bb565b604051808215151515815260200191505060405180910390f35b348015610a8d57600080fd5b50610a96613a83565b6040518082815260200191505060405180910390f35b348015610ab857600080fd5b50610b3a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190505050613a89565b604051808215151515815260200191505060405180910390f35b348015610b6057600080fd5b50610b7f60048036038101908080359060200190929190505050614020565b604051808215151515815260200191505060405180910390f35b348015610ba557600080fd5b50610c0760048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001909291905050506140ad565b604051808215151515815260200191505060405180910390f35b348015610c2d57600080fd5b50610c36614454565b005b348015610c4457600080fd5b50610c79600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506144f4565b6040518082815260200191505060405180910390f35b348015610c9b57600080fd5b50610ca461450c565b6040518082815260200191505060405180910390f35b348015610cc657600080fd5b50610ccf614516565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d0f578082015181840152602081019050610cf4565b50505050905090810190601f168015610d3c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610d5657600080fd5b50610dab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061454f565b6040518082815260200191505060405180910390f35b348015610dcd57600080fd5b50610dd6614574565b604051808215151515815260200191505060405180910390f35b348015610dfc57600080fd5b50610e31600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614587565b6040518082815260200191505060405180910390f35b348015610e5357600080fd5b50610e5c61476c565b604051808215151515815260200191505060405180910390f35b348015610e8257600080fd5b50610ec1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061484f565b604051808215151515815260200191505060405180910390f35b348015610ee757600080fd5b50610ef0614b3c565b604051808215151515815260200191505060405180910390f35b348015610f1657600080fd5b50610f55600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050614c02565b604051808215151515815260200191505060405180910390f35b348015610f7b57600080fd5b50610fdd6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190505050615003565b604051808215151515815260200191505060405180910390f35b34801561100357600080fd5b5061100c61558c565b6040518082815260200191505060405180910390f35b34801561102e57600080fd5b50611037615592565b005b34801561104557600080fd5b5061104e615627565b6040518082815260200191505060405180910390f35b34801561107057600080fd5b506110a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061562d565b6040518082815260200191505060405180910390f35b3480156110c757600080fd5b50611106600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050615690565b604051808215151515815260200191505060405180910390f35b34801561112c57600080fd5b50611181600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061586f565b6040518082815260200191505060405180910390f35b3480156111a357600080fd5b506111ac6158f6565b6040518082815260200191505060405180910390f35b3480156111ce57600080fd5b506111d76158fc565b6040518082815260200191505060405180910390f35b3480156111f957600080fd5b5061122e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050615902565b604051808215151515815260200191505060405180910390f35b34801561125457600080fd5b5061125d615bda565b6040518082815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112ce57600080fd5b60024203600681905550600142036007819055507fa968378e910134ded7db0a5144e2c6a2d157f1685baa51f39de6c13a5e8ffa8960405160405180910390a1565b6040805190810160405280600a81526020017f466f756e7461696e20320000000000000000000000000000000000000000000081525081565b600060065442108061135c575060075442115b151561136757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113a4576001905061148f565b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b6000600354905090565b6000806006544210806114b3575060075442115b15156114be57600080fd5b848484600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561152b5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b151561153657600080fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561157157600080fd5b60008111151561158057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141515156115dc57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415151561163857600080fd5b6116428887615be0565b151561164d57600080fd5b8773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117a457600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054935083861115151561171057600080fd5b6117238685615bfb90919063ffffffff16565b600960008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6117f686600860008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615bfb90919063ffffffff16565b600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061188b86600860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615c1490919063ffffffff16565b600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef886040518082815260200191505060405180910390a360019450505050509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561199d57600080fd5b81811115156119ab57600080fd5b81600681905550806007819055507fac04925986d687f5e264774dac7e393e920d61c9b99e92497853eb519484e4dd8282604051808381526020018281526020019250505060405180910390a15050565b601281565b6000806000806000806000600654421080611a1d575060075442115b1515611a2857600080fd5b88519550875186141515611a3b57600080fd5b6000945060009350600092505b85831015611b3d578883815181101515611a5e57fe5b906020019060200201519150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480611af157506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611afb57611b30565b8480600101955050611b2d8884815181101515611b1457fe5b9060200190602002015185615c1490919063ffffffff16565b93505b8280600101935050611a48565b600084111515611b4c57600080fd5b611b563385615be0565b1515611b6157600080fd5b611bb384600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615bfb90919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600092505b85831015611dde578883815181101515611c1157fe5b906020019060200201519150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480611ca457506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611cae57611dd1565b8783815181101515611cbc57fe5b9060200190602002015190506000811415611cd657611dd1565b611d2881600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615c1490919063ffffffff16565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b8280600101935050611bfb565b6001965050505050505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611e985750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611ea357600080fd5b600654421080611eb4575060075442115b1515611ebf57600080fd5b600160149054906101000a900460ff161515611eda57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611f855750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1515611f9057600080fd5b611f9982612e81565b1515611fa457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561202a5761200382615c32565b151561200e57600080fd5b61202382600554615c1490919063ffffffff16565b6005819055505b61203f82600354615c1490919063ffffffff16565b60038190555061209782600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615c1490919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000806006544210806121ac575060075442115b15156121b757600080fd5b600160149054906101000a900460ff1615156121d257600080fd5b6121db3361562d565b90508083111515156121ec57600080fd5b61220183600354615bfb90919063ffffffff16565b60038190555061225983600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615bfb90919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5846040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a36001915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123b757600080fd5b6006544210806123c8575060075442115b15156123d357600080fd5b82600a8190555081600b81905550600a54600b54600a54011115156123f757600080fd5b6000600c60006101000a81548160ff0219169083151502179055507f4a1179f4d7ff6354606313c42f6054383e9549f9db56ac4b66b424bc940f79ed8383604051808381526020018281526020019250505060405180910390a16001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156124b857600080fd5b600160149054906101000a900460ff161515156124d457600080fd5b60018060146101000a81548160ff0219169083151502179055507fa039c7af624b7305fc7002f670d116cf0c8b61a558a10ff96be611c5c235751760405160405180910390a16001905090565b600160149054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561259157600080fd5b6006544210806125a2575060075442115b15156125ad57600080fd5b600c60009054906101000a900460ff1615156125c857600080fd5b6000600c60006101000a81548160ff0219169083151502179055507f14245ee125d3810a2a28f6b656b676516364a51e95a688ddf08af4194fc3db1260405160405180910390a16001905090565b600d602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154908060030154905084565b600080600080600080612664615c90565b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141580156126ee57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614155b80156127485750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614155b151561275357600080fd5b600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002095506000945060019350856000808152602001908152602001600020600301549250600191505b8282111515612897578560008381526020019081526020016000206080604051908101604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508060000151421115156128355761282e816060015186615c1490919063ffffffff16565b945061288a565b806020015142101561288957620151808160000151420381151561285557fe5b04935061288681604001518583606001510281151561287057fe5b0482606001510386615c1490919063ffffffff16565b94505b5b81806001019250506127b9565b849650505050505050919050565b6000806000806000806000806006544210806128c2575060075442115b15156128cd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161415801561295757506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614155b151561296257600080fd5b8951965088518714151561297557600080fd5b6000955060009450600093505b86841015612a7757898481518110151561299857fe5b906020019060200201519250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480612a2b57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15612a3557612a6a565b8580600101965050612a678985815181101515612a4e57fe5b9060200190602002015186615c1490919063ffffffff16565b94505b8380600101945050612982565b600085111515612a8657600080fd5b612a908b86615be0565b1515612a9b57600080fd5b8a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bf257600960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150818511151515612b5e57600080fd5b612b718583615bfb90919063ffffffff16565b600960008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b612c4485600860008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615bfb90919063ffffffff16565b600860008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600093505b86841015612e6f578984815181101515612ca257fe5b906020019060200201519250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480612d3557506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15612d3f57612e62565b8884815181101515612d4d57fe5b9060200190602002015190506000811415612d6757612e62565b612db981600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615c1490919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b8380600101945050612c8c565b60019750505050505050509392505050565b6000806002541480612ea95750600254612ea683600354615c1490919063ffffffff16565b11155b9050919050565b600080600654421080612ec4575060075442115b1515612ecf57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612f0c576001915061309d565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015612f9c5760009050612fb2565b612faf8382615bfb90919063ffffffff16565b90505b80600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3600191505b5092915050565b6000806000806000806000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561310e57600080fd5b60065442108061311f575060075442115b151561312a57600080fd5b600c60009054906101000a900460ff1615151561314657600080fd5b8b5198508a518914151561315957600080fd5b6000975060009650600095505b888610156132b3578b8681518110151561317c57fe5b906020019060200201519450600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061320f57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b806132675750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b15613271576132a6565b87806001019850506132a38b8781518110151561328a57fe5b9060200190602002015188615c1490919063ffffffff16565b96505b8580600101965050613166565b6000871115156132c257600080fd5b6132cb87612e81565b15156132d657600080fd5b6132eb87600354615c1490919063ffffffff16565b600381905550600095505b8886101561365f578b8681518110151561330c57fe5b906020019060200201519450600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061339f57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b806133f75750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b1561340157613652565b8a8681518110151561340f57fe5b906020019060200201519350600084141561342957613652565b61347b84600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615c1490919063ffffffff16565b600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885856040518082815260200191505060405180910390a28473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250826000808152602001908152602001600020915060018260030154019050608060405190810160405280600a548152602001600b54600a5401815260200162015180600b5481151561360157fe5b04815260200185815250836000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050508082600301819055505b85806001019650506132f6565b6001995050505050505050505092915050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561371b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561375757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156137b457600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561381057600080fd5b6000600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561385e57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167ffc952dd6557f6861208ba39acbc0cfe5b4f12e76e6b467ed4200003f2b0cd8b060405160405180910390a3600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600192505050919050565b600a5481565b6000806000806000806000600654421080613aa5575060075442115b1515613ab057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614158015613b3a57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614155b1515613b4557600080fd5b600088111515613b5457600080fd5b8851955060009450600093505b85841015613c2a578884815181101515613b7757fe5b906020019060200201519250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480613c0a57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15613c1457613c1d565b84806001019550505b8380600101945050613b61565b600085111515613c3957600080fd5b613c4c8589615c5590919063ffffffff16565b9150613c588a83615be0565b1515613c6357600080fd5b8973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613dba57600960008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808211151515613d2657600080fd5b613d398282615bfb90919063ffffffff16565b600960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b613e0c82600860008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615bfb90919063ffffffff16565b600860008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600093505b8584101561400f578884815181101515613e6a57fe5b906020019060200201519250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480613efd57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15613f0757614002565b613f5988600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615c1490919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8a6040518082815260200191505060405180910390a35b8380600101945050613e54565b600196505050505050509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561407d57600080fd5b6003548210801561408e5750600082115b1561409c57600090506140a8565b81600281905550600190505b919050565b6000806000806000806006544210806140c7575060075442115b15156140d257600080fd5b6000871115156140e157600080fd5b8751945060009350600092505b848310156141b757878381518110151561410457fe5b906020019060200201519150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061419757506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156141a1576141aa565b83806001019450505b82806001019350506140ee565b6000841115156141c657600080fd5b6141d98488615c5590919063ffffffff16565b90506141e53382615be0565b15156141f057600080fd5b61424281600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615bfb90919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600092505b848310156144455787838151811015156142a057fe5b906020019060200201519150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061433357506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561433d57614438565b61438f87600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615c1490919063ffffffff16565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef896040518082815260200191505060405180910390a35b828060010193505061428a565b60019550505050505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156144af57600080fd5b60014203600681905550639a7ec80042016007819055507fb7e43176b89d4cefed0cca5fc9b2f8e752d3d192b83123ef306a0a55dcd18a6b60405160405180910390a1565b60086020528060005260406000206000915090505481565b6000600554905090565b6040805190810160405280600381526020017f46544e000000000000000000000000000000000000000000000000000000000081525081565b6009602052816000526040600020602052806000526040600020600091509150505481565b600c60009054906101000a900460ff1681565b6000806000806000614597615c90565b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415801561462157506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b801561467b5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b151561468657600080fd5b600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020945060009350846000808152602001908152602001600020600301549250600191505b828211151561475f57846000838152602001908152602001600020608060405190810160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050614750816060015185615c1490919063ffffffff16565b935081806001019250506146e8565b8395505050505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156147c957600080fd5b6006544210806147da575060075442115b15156147e557600080fd5b600c60009054906101000a900460ff1615151561480157600080fd5b6001600c60006101000a81548160ff0219169083151502179055507fcd16c719d9bfc829719d0e728b877ea1f29c77fd759480f077f4f6bc2a26e02560405160405180910390a16001905090565b6000600654421080614862575060075442115b151561486d57600080fd5b338383600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156148da5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15156148e557600080fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561492057600080fd5b60008111151561492f57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561498b57600080fd5b6149953386615be0565b15156149a057600080fd5b6149f285600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615bfb90919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614a8785600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615c1490919063ffffffff16565b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a36001935050505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515614b9957600080fd5b600160149054906101000a900460ff161515614bb457600080fd5b6000600160146101000a81548160ff0219169083151502179055507f5f6f015054fd8937bdf17b86b7684be4ae883d459fb0bec23bc11f75a13b594460405160405180910390a16001905090565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515614c6357600080fd5b600654421080614c74575060075442115b1515614c7f57600080fd5b600c60009054906101000a900460ff16151515614c9b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515614cd757600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515614d3357600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515614d9057600080fd5b600085111515614d9f57600080fd5b614da885612e81565b1515614db357600080fd5b600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250826000808152602001908152602001600020915060018260030154019050608060405190810160405280600a548152602001600b54600a5401815260200162015180600b54811515614e4257fe5b0481526020018681525083600083815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050808260030181905550614ea785600354615c1490919063ffffffff16565b600381905550614eff85600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615c1490919063ffffffff16565b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885866040518082815260200191505060405180910390a28573ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a36001935050505092915050565b60008060008060008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561506c57600080fd5b60065442108061507d575060075442115b151561508857600080fd5b600c60009054906101000a900460ff161515156150a457600080fd5b60008a1115156150b357600080fd5b8a51975060009650600095505b878610156151e1578a868151811015156150d657fe5b906020019060200201519450600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061516957506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b806151c15750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b156151cb576151d4565b86806001019750505b85806001019650506150c0565b6000871115156151f057600080fd5b615203878b615c5590919063ffffffff16565b935061520e84612e81565b151561521957600080fd5b61522e84600354615c1490919063ffffffff16565b600381905550600095505b8786101561557a578a8681518110151561524f57fe5b906020019060200201519450600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806152e257506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b8061533a5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b156153445761556d565b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250826000808152602001908152602001600020915060018260030154019050608060405190810160405280600a548152602001600b54600a5401815260200162015180600b548115156153d357fe5b0481526020018b815250836000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050508082600301819055506154758a600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615c1490919063ffffffff16565b600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858b6040518082815260200191505060405180910390a28473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c6040518082815260200191505060405180910390a35b8580600101965050615239565b60019850505050505050505092915050565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156155ed57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b60055481565b600061568961563b83612653565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615bfb90919063ffffffff16565b9050919050565b6000806006544210806156a4575060075442115b15156156af57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156156ec5760019150615868565b61577b83600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054615c1490919063ffffffff16565b905080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3600191505b5092915050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60035481565b60025481565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561596057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561599c57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156159f857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515615a5557600080fd5b6000600860008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515615ac457600080fd5b6000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515615b1257600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36001915050919050565b600b5481565b600080615bec8461562d565b90508083111591505092915050565b6000828211151515615c0957fe5b818303905092915050565b6000808284019050838110151515615c2857fe5b8091505092915050565b6000600454615c4c83600554615c1490919063ffffffff16565b11159050919050565b6000806000841415615c6a5760009150615c89565b8284029050828482811515615c7b57fe5b04141515615c8557fe5b8091505b5092915050565b6080604051908101604052806000815260200160008152602001600081526020016000815250905600a165627a7a723058209c13bbade83e83cf6718802e4fc3d6afb82774bd2b2b0b7efd21962817ca71880029
    private static final String BINARY = "";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
    }

    protected __Erc20_sol_FtnToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected __Erc20_sol_FtnToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<InvestStartEventResponse> getInvestStartEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("InvestStart", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<InvestStartEventResponse> responses = new ArrayList<InvestStartEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            InvestStartEventResponse typedResponse = new InvestStartEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<InvestStartEventResponse> investStartEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("InvestStart", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, InvestStartEventResponse>() {
            @Override
            public InvestStartEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                InvestStartEventResponse typedResponse = new InvestStartEventResponse();
                return typedResponse;
            }
        });
    }

    public List<InvestStopEventResponse> getInvestStopEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("InvestStop", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<InvestStopEventResponse> responses = new ArrayList<InvestStopEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            InvestStopEventResponse typedResponse = new InvestStopEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<InvestStopEventResponse> investStopEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("InvestStop", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, InvestStopEventResponse>() {
            @Override
            public InvestStopEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                InvestStopEventResponse typedResponse = new InvestStopEventResponse();
                return typedResponse;
            }
        });
    }

    public List<NewInvestEventResponse> getNewInvestEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewInvest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<NewInvestEventResponse> responses = new ArrayList<NewInvestEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            NewInvestEventResponse typedResponse = new NewInvestEventResponse();
            typedResponse.release_start = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.release_duration = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewInvestEventResponse> newInvestEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewInvest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewInvestEventResponse>() {
            @Override
            public NewInvestEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                NewInvestEventResponse typedResponse = new NewInvestEventResponse();
                typedResponse.release_start = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.release_duration = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Mint", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            MintEventResponse typedResponse = new MintEventResponse();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MintEventResponse> mintEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Mint", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, MintEventResponse>() {
            @Override
            public MintEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                MintEventResponse typedResponse = new MintEventResponse();
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<BurnEventResponse> getBurnEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Burn", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<BurnEventResponse> responses = new ArrayList<BurnEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            BurnEventResponse typedResponse = new BurnEventResponse();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BurnEventResponse> burnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Burn", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, BurnEventResponse>() {
            @Override
            public BurnEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                BurnEventResponse typedResponse = new BurnEventResponse();
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ContractPauseEventResponse> getContractPauseEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ContractPause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ContractPauseEventResponse> responses = new ArrayList<ContractPauseEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ContractPauseEventResponse typedResponse = new ContractPauseEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ContractPauseEventResponse> contractPauseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ContractPause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ContractPauseEventResponse>() {
            @Override
            public ContractPauseEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ContractPauseEventResponse typedResponse = new ContractPauseEventResponse();
                return typedResponse;
            }
        });
    }

    public List<ContractResumeEventResponse> getContractResumeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ContractResume", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ContractResumeEventResponse> responses = new ArrayList<ContractResumeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ContractResumeEventResponse typedResponse = new ContractResumeEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ContractResumeEventResponse> contractResumeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ContractResume", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ContractResumeEventResponse>() {
            @Override
            public ContractResumeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ContractResumeEventResponse typedResponse = new ContractResumeEventResponse();
                return typedResponse;
            }
        });
    }

    public List<ContractPauseScheduleEventResponse> getContractPauseScheduleEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ContractPauseSchedule", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ContractPauseScheduleEventResponse> responses = new ArrayList<ContractPauseScheduleEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ContractPauseScheduleEventResponse typedResponse = new ContractPauseScheduleEventResponse();
            typedResponse.from = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ContractPauseScheduleEventResponse> contractPauseScheduleEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ContractPauseSchedule", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ContractPauseScheduleEventResponse>() {
            @Override
            public ContractPauseScheduleEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ContractPauseScheduleEventResponse typedResponse = new ContractPauseScheduleEventResponse();
                typedResponse.from = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.to = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<ForgeStartEventResponse> getForgeStartEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ForgeStart", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ForgeStartEventResponse> responses = new ArrayList<ForgeStartEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ForgeStartEventResponse typedResponse = new ForgeStartEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ForgeStartEventResponse> forgeStartEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ForgeStart", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ForgeStartEventResponse>() {
            @Override
            public ForgeStartEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ForgeStartEventResponse typedResponse = new ForgeStartEventResponse();
                return typedResponse;
            }
        });
    }

    public List<ForgeStopEventResponse> getForgeStopEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ForgeStop", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ForgeStopEventResponse> responses = new ArrayList<ForgeStopEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ForgeStopEventResponse typedResponse = new ForgeStopEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ForgeStopEventResponse> forgeStopEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ForgeStop", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ForgeStopEventResponse>() {
            @Override
            public ForgeStopEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ForgeStopEventResponse typedResponse = new ForgeStopEventResponse();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.oldone = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newone = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.oldone = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newone = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<FoundationOwnershipTransferredEventResponse> getFoundationOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("FoundationOwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<FoundationOwnershipTransferredEventResponse> responses = new ArrayList<FoundationOwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            FoundationOwnershipTransferredEventResponse typedResponse = new FoundationOwnershipTransferredEventResponse();
            typedResponse.oldFoundationOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newFoundationOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<FoundationOwnershipTransferredEventResponse> foundationOwnershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("FoundationOwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, FoundationOwnershipTransferredEventResponse>() {
            @Override
            public FoundationOwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                FoundationOwnershipTransferredEventResponse typedResponse = new FoundationOwnershipTransferredEventResponse();
                typedResponse.oldFoundationOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newFoundationOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> resume() {
        Function function = new Function(
                "resume", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> name() {
        Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String delegator, BigInteger value) {
        Function function = new Function(
                "approve", 
                Arrays.<Type>asList(new Address(delegator),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String from, String to, BigInteger value) {
        Function function = new Function(
                "transferFrom", 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> pause(BigInteger from, BigInteger to) {
        Function function = new Function(
                "pause", 
                Arrays.<Type>asList(new Uint256(from),
                new Uint256(to)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> batchTransfers(List<String> receivers, List<BigInteger> amounts) {
        Function function = new Function(
                "batchTransfers", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Address>(
                        org.web3j.abi.Utils.typeMap(receivers, Address.class)),
                new org.web3j.abi.datatypes.DynamicArray<Uint256>(
                        org.web3j.abi.Utils.typeMap(amounts, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mint(String target, BigInteger amount) {
        Function function = new Function(
                "mint", 
                Arrays.<Type>asList(new Address(target),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> burn(BigInteger amount) {
        Function function = new Function(
                "burn", 
                Arrays.<Type>asList(new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setInvest(BigInteger release_start, BigInteger release_duration) {
        Function function = new Function(
                "setInvest", 
                Arrays.<Type>asList(new Uint256(release_start),
                new Uint256(release_duration)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> startForge() {
        Function function = new Function(
                "startForge", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> forge_running() {
        Function function = new Function("forge_running", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> resumeInvest() {
        Function function = new Function(
                "resumeInvest", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> lockbins(String param0, BigInteger param1) {
        final Function function = new Function("lockbins", 
                Arrays.<Type>asList(new Address(param0),
                new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getLockedToken(String investor) {
        Function function = new Function("getLockedToken", 
                Arrays.<Type>asList(new Address(investor)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> batchTransferFroms(String from, List<String> receivers, List<BigInteger> amounts) {
        Function function = new Function(
                "batchTransferFroms", 
                Arrays.<Type>asList(new Address(from),
                new org.web3j.abi.datatypes.DynamicArray<Address>(
                        org.web3j.abi.Utils.typeMap(receivers, Address.class)),
                new org.web3j.abi.datatypes.DynamicArray<Uint256>(
                        org.web3j.abi.Utils.typeMap(amounts, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> canMint(BigInteger amount) {
        Function function = new Function("canMint", 
                Arrays.<Type>asList(new Uint256(amount)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> decreaseApproval(String delegator, BigInteger delta) {
        Function function = new Function(
                "decreaseApproval", 
                Arrays.<Type>asList(new Address(delegator),
                new Uint256(delta)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchInvests(List<String> investors, List<BigInteger> amounts) {
        Function function = new Function(
                "batchInvests", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Address>(
                        org.web3j.abi.Utils.typeMap(investors, Address.class)),
                new org.web3j.abi.datatypes.DynamicArray<Uint256>(
                        org.web3j.abi.Utils.typeMap(amounts, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> balanceOf(String user) {
        Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setFountainFoundationOwner(String newFoundationOwner) {
        Function function = new Function(
                "setFountainFoundationOwner", 
                Arrays.<Type>asList(new Address(newFoundationOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> releaseStart() {
        Function function = new Function("releaseStart", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> batchTransferFrom(String from, List<String> receivers, BigInteger amount) {
        Function function = new Function(
                "batchTransferFrom", 
                Arrays.<Type>asList(new Address(from),
                new org.web3j.abi.datatypes.DynamicArray<Address>(
                        org.web3j.abi.Utils.typeMap(receivers, Address.class)),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeCap(BigInteger _cap) {
        Function function = new Function(
                "changeCap", 
                Arrays.<Type>asList(new Uint256(_cap)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchTransfer(List<String> receivers, BigInteger amount) {
        Function function = new Function(
                "batchTransfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Address>(
                        org.web3j.abi.Utils.typeMap(receivers, Address.class)),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> pause() {
        Function function = new Function(
                "pause", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> wallets(String param0) {
        Function function = new Function("wallets", 
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> totalFountainSupply() {
        Function function = new Function("totalFountainSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> symbol() {
        Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> warrants(String param0, String param1) {
        Function function = new Function("warrants", 
                Arrays.<Type>asList(new Address(param0),
                new Address(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> forceStopInvest() {
        Function function = new Function("forceStopInvest", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getInvestedToken(String investor) {
        Function function = new Function("getInvestedToken", 
                Arrays.<Type>asList(new Address(investor)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> pauseInvest() {
        Function function = new Function(
                "pauseInvest", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transfer(String target, BigInteger value) {
        /*Function function = new Function(
                "transfer", 
                Arrays.<Type>asList(new Address(target),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());*/
        Function function = new Function(
                "transfer",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(target),
                        new org.web3j.abi.datatypes.generated.Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> stopForge() {
        Function function = new Function(
                "stopForge", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> invest(String investor, BigInteger amount) {
        Function function = new Function(
                "invest", 
                Arrays.<Type>asList(new Address(investor),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchInvest(List<String> investors, BigInteger amount) {
        Function function = new Function(
                "batchInvest", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Address>(
                        org.web3j.abi.Utils.typeMap(investors, Address.class)),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> token_foundation_cap() {
        Function function = new Function("token_foundation_cap", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> suicide() {
        Function function = new Function(
                "suicide", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> token_foundation_created() {
        Function function = new Function("token_foundation_created", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> availableWallet(String user) {
        Function function = new Function("availableWallet", 
                Arrays.<Type>asList(new Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> increaseApproval(String delegator, BigInteger delta) {
        Function function = new Function(
                "increaseApproval", 
                Arrays.<Type>asList(new Address(delegator),
                new Uint256(delta)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> allowance(String owner, String delegator) {
        Function function = new Function("allowance", 
                Arrays.<Type>asList(new Address(owner),
                new Address(delegator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> token_created() {
        Function function = new Function("token_created", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> token_cap() {
        Function function = new Function("token_cap", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> releaseDuration() {
        Function function = new Function("releaseDuration", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<__Erc20_sol_FtnToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(__Erc20_sol_FtnToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<__Erc20_sol_FtnToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(__Erc20_sol_FtnToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static __Erc20_sol_FtnToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new __Erc20_sol_FtnToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static __Erc20_sol_FtnToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new __Erc20_sol_FtnToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class InvestStartEventResponse {
    }

    public static class InvestStopEventResponse {
    }

    public static class NewInvestEventResponse {
        public BigInteger release_start;

        public BigInteger release_duration;
    }

    public static class MintEventResponse {
        public String user;

        public BigInteger amount;
    }

    public static class BurnEventResponse {
        public String user;

        public BigInteger amount;
    }

    public static class ContractPauseEventResponse {
    }

    public static class ContractResumeEventResponse {
    }

    public static class ContractPauseScheduleEventResponse {
        public BigInteger from;

        public BigInteger to;
    }

    public static class ForgeStartEventResponse {
    }

    public static class ForgeStopEventResponse {
    }

    public static class OwnershipTransferredEventResponse {
        public String oldone;

        public String newone;
    }

    public static class FoundationOwnershipTransferredEventResponse {
        public String oldFoundationOwner;

        public String newFoundationOwner;
    }

    public static class ApprovalEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class TransferEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }
}
